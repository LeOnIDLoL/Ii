#!/usr/bin/env python3
"""
Sketal Bot Simple - SuperGrok AI v1.3
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ Python

–§—É–Ω–∫—Ü–∏–∏:
- VK API —á–µ—Ä–µ–∑ urllib
- –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –≤ –±–µ—Å–µ–¥–∞—Ö
- –ö–æ–º–∞–Ω–¥—ã /help, /status, /info
- –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
"""

import urllib.request
import urllib.parse
import json
import time
import asyncio
import logging
from typing import Dict, Any, Optional, List
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class VKSimpleAPI:
    """–ü—Ä–æ—Å—Ç–æ–π VK API –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    
    def __init__(self, user_token: str, group_token: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API"""
        self.user_token = user_token
        self.group_token = group_token
        self.api_version = '5.199'
        self.base_url = 'https://api.vk.com/method/'
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.message_count = 0
        self.error_count = 0
        self.start_time = time.time()
        
        logger.info("üöÄ VK Simple API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _make_request(self, method: str, params: Dict[str, Any]) -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é API
            params['v'] = self.api_version
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL
            url = f"{self.base_url}{method}"
            data = urllib.parse.urlencode(params)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
            req = urllib.request.Request(f"{url}?{data}")
            req.add_header('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36')
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            with urllib.request.urlopen(req, timeout=15) as response:
                result = json.loads(response.read().decode('utf-8'))
                
                if 'error' in result:
                    logger.error(f"‚ùå VK API –æ—à–∏–±–∫–∞: {result['error']}")
                    return None
                
                return result
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞ {method}: {e}")
            self.error_count += 1
            return None
    
    async def send_message(self, peer_id: int, message: str, **kwargs) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            params = {
                'access_token': self.group_token,
                'peer_id': peer_id,
                'message': message,
                'random_id': int(time.time() * 1000)
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            for key, value in kwargs.items():
                if value is not None:
                    params[key] = value
            
            result = self._make_request('messages.send', params)
            
            if result and 'response' in result:
                self.message_count += 1
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ #{self.message_count} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {peer_id}: '{message[:50]}...'")
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {peer_id}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.error_count += 1
            return False
    
    async def get_conversations(self, count: int = 20) -> Optional[List]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–µ—Å–µ–¥"""
        try:
            params = {
                'access_token': self.group_token,
                'count': count
            }
            
            result = self._make_request('messages.getConversations', params)
            
            if result and 'response' in result:
                return result['response'].get('items', [])
            else:
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–µ–¥: {e}")
            self.error_count += 1
            return None
    
    async def get_user_info(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            params = {
                'access_token': self.group_token,
                'user_ids': user_id
            }
            
            result = self._make_request('users.get', params)
            
            if result and 'response' in result and result['response']:
                return result['response'][0]
            else:
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
            self.error_count += 1
            return None
    
    async def get_group_info(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ"""
        try:
            params = {
                'access_token': self.group_token
            }
            
            result = self._make_request('groups.getById', params)
            
            if result and 'response' in result and result['response']:
                return result['response'][0]
            else:
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: {e}")
            self.error_count += 1
            return None
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        uptime = time.time() - self.start_time
        return {
            'uptime_seconds': int(uptime),
            'uptime_formatted': f"{int(uptime // 3600)}—á {int((uptime % 3600) // 60)}–º {int(uptime % 60)}—Å",
            'messages_sent': self.message_count,
            'errors_count': self.error_count,
            'success_rate': f"{(self.message_count / (self.message_count + self.error_count) * 100):.1f}%" if (self.message_count + self.error_count) > 0 else "0%"
        }
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        return {
            'initialized': bool(self.group_token),
            'api_version': self.api_version,
            'tokens_available': {
                'user': bool(self.user_token),
                'group': bool(self.group_token)
            }
        }

class SketalSimpleBot:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π Sketal Bot"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.vk_config = {
            'api_version': '5.199',
            'vk_user_token': 'vk1.a.2Xtue-gz7QJxLXB6D5UGwKoPRzKSikXtnMSZ-jzWt6AvXLyTLelDmvAhf4tIpcC8xzJBtnhZBbjKPOeh7MQO1Tb6XqlAQRG2QKuRUziuDmSZ_udQwusY3Elyn9YhbRjX_w6SRtJzIKGGjmdAcQx8J-IUKrluzlw6TJhMyDTU-jSZXWtPCh-yYyTO8KpE8T1',
            'vk_group_token': 'vk1.a.gw_xaDxcf_1hSZoVlt__iSEjsvwtHs-Bo_Q-8dAyWJ_d8WxwQSvuoNH0bIACX1BmJO_zWP1Mts7prFErFTrpD2KKKbxnku61YrAyeLlzoavzjWiR891KvGdjbn2kpA91eN6yfco0azsOvcZBrQdK_k06dIaXpW_ZZ5PgeF4yK-04grYCDQWnoGuo3Zf8PZ67EOdSKx-j6IvS463QRyk9xw'
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API
        self.api = VKSimpleAPI(
            self.vk_config['vk_user_token'],
            self.vk_config['vk_group_token']
        )
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        self.running = False
        self.message_count = 0
        self.command_count = 0
        self.start_time = time.time()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.command_handlers = {
            'help': self._handle_help,
            'status': self._handle_status,
            'info': self._handle_info,
            'stats': self._handle_stats,
            'ping': self._handle_ping
        }
        
        # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã
        self.auto_replies = {
            '–ø—Ä–∏–≤–µ—Ç': 'üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
            'hello': 'üëã Hello! How are you?',
            'hi': 'üëã Hi there!',
            '–∫–∞–∫ –¥–µ–ª–∞': 'ü§ñ –£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! –ê —É —Ç–µ–±—è?',
            'how are you': 'ü§ñ I\'m doing great! How about you?',
            '—Å–ø–∞—Å–∏–±–æ': 'üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –ø–æ–º–æ—á—å!',
            'thanks': 'üòä You\'re welcome! Glad to help!',
            '–ø–æ–∫–∞': 'üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë—É–¥—É –∂–¥–∞—Ç—å –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!',
            'bye': 'üëã Goodbye! Looking forward to new messages!'
        }
        
        logger.info("‚úÖ Sketal Simple Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Sketal Simple Bot...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å VK API
            status = self.api.get_status()
            if not status['initialized']:
                logger.error("‚ùå VK API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            group_info = await self.api.get_group_info()
            if group_info:
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥—Ä—É–ø–ø–µ: {group_info.get('name', 'Unknown')}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            self.running = True
            await self._main_loop()
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return False
    
    async def _main_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
        try:
            logger.info("üîÑ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω")
            logger.info("üì± –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            logger.info("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã: /help, /status, /info, /stats, /ping")
            
            # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            while self.running:
                await asyncio.sleep(1)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
    
    async def _handle_help(self, peer_id: int, args: str = ""):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üì± **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

üîß **–û—Å–Ω–æ–≤–Ω—ã–µ:**
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ VK API
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
/ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏

ü§ñ **–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã:**
–ü—Ä–∏–≤–µ—Ç, Hello, Hi ‚Üí –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
–ö–∞–∫ –¥–µ–ª–∞, How are you ‚Üí –°—Ç–∞—Ç—É—Å
–°–ø–∞—Å–∏–±–æ, Thanks ‚Üí –í–µ–∂–ª–∏–≤–æ—Å—Ç—å
–ü–æ–∫–∞, Bye ‚Üí –ü—Ä–æ—â–∞–Ω–∏–µ

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
–°–æ–æ–±—â–µ–Ω–∏—è, –æ—à–∏–±–∫–∏, –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        """
        
        await self.api.send_message(peer_id, help_text.strip())
    
    async def _handle_status(self, peer_id: int, args: str = ""):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            bot_stats = self.api.get_stats()
            vk_status = self.api.get_status()
            
            status_text = f"""
üìä **–°—Ç–∞—Ç—É—Å Sketal Simple Bot:**

ü§ñ **–ë–æ—Ç:**
–í–µ—Ä—Å–∏—è: SuperGrok AI v1.3
–°—Ç–∞—Ç—É—Å: {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if self.running else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {bot_stats['uptime_formatted']}

üì± **VK API:**
–í–µ—Ä—Å–∏—è: {vk_status['api_version']}
–°—Ç–∞—Ç—É—Å: {'üü¢ –î–æ—Å—Ç—É–ø–µ–Ω' if vk_status['initialized'] else 'üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
–¢–æ–∫–µ–Ω—ã: {'‚úÖ' if vk_status['tokens_available']['group'] else '‚ùå'} –ì—Ä—É–ø–ø–∞, {'‚úÖ' if vk_status['tokens_available']['user'] else '‚ùå'} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
–°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {bot_stats['messages_sent']}
–û—à–∏–±–æ–∫: {bot_stats['errors_count']}
–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {bot_stats['success_rate']}
            """
            
            await self.api.send_message(peer_id, status_text.strip())
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await self.api.send_message(peer_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
    
    async def _handle_info(self, peer_id: int, args: str = ""):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /info"""
        info_text = """
ü§ñ **Sketal Simple Bot - SuperGrok AI v1.3**

üöÄ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ VK API 5.199
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –≤ –±–µ—Å–µ–¥–∞—Ö
‚Ä¢ –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

üì± **VK –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –±–µ—Å–µ–¥–∞–º–∏
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API

üîß **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:**
‚Ä¢ Python 3.7+
‚Ä¢ –¢–æ–ª—å–∫–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
‚Ä¢ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        """
        
        await self.api.send_message(peer_id, info_text.strip())
    
    async def _handle_stats(self, peer_id: int, args: str = ""):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats"""
        try:
            bot_stats = self.api.get_stats()
            
            stats_text = f"""
üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Sketal Simple Bot:**

‚è±Ô∏è **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:**
{bot_stats['uptime_formatted']}

üì® **–°–æ–æ–±—â–µ–Ω–∏—è:**
–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {bot_stats['messages_sent']}
–û—à–∏–±–æ–∫: {bot_stats['errors_count']}
–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {bot_stats['success_rate']}

üîß **–ö–æ–º–∞–Ω–¥—ã:**
–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.command_count}

üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
–°–æ–æ–±—â–µ–Ω–∏–π: {self.message_count}
–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.fromtimestamp(self.start_time).strftime('%Y-%m-%d %H:%M:%S')}
            """
            
            await self.api.send_message(peer_id, stats_text.strip())
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await self.api.send_message(peer_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    
    async def _handle_ping(self, peer_id: int, args: str = ""):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ping"""
        start_time = time.time()
        await self.api.send_message(peer_id, "üèì Pong!")
        end_time = time.time()
        
        ping_time = round((end_time - start_time) * 1000, 2)
        await self.api.send_message(peer_id, f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {ping_time}ms")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Sketal Simple Bot...")
            self.running = False
            logger.info("‚úÖ Sketal Simple Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
        uptime = time.time() - self.start_time
        return {
            'uptime_seconds': int(uptime),
            'uptime_formatted': f"{int(uptime // 3600)}—á {int((uptime % 3600) // 60)}–º {int(uptime % 60)}—Å",
            'message_count': self.message_count,
            'command_count': self.command_count,
            'vk_stats': self.api.get_stats() if self.api else {},
            'bot_status': {
                'running': self.running,
                'start_time': self.start_time
            }
        }

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ Sketal Simple Bot - SuperGrok AI v1.3")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = SketalSimpleBot()
    
    try:
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        success = await bot.start()
        
        if success:
            print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            print("üì± –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
            
            # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            while bot.running:
                await asyncio.sleep(1)
                
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        await bot.stop()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
        await bot.stop()
    finally:
        print("üèÅ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Bot stopped by user")
    except Exception as e:
        print(f"‚ùå Bot error: {e}")