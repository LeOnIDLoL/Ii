#!/usr/bin/env python3
"""
VK Controller - SuperGrok AI v1.3
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π VK –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π API 5.199

–§—É–Ω–∫—Ü–∏–∏:
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π VK API 5.199
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥—Ä—É–ø–ø, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –±–µ—Å–µ–¥
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –≤ –±–µ—Å–µ–¥–∞—Ö
"""

import vk_api
import asyncio
import logging
import time
import json
from typing import Optional, Dict, Any, List
from datetime import datetime
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.utils import get_random_id

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from config import get_vk_config, get_bot_config

logger = logging.getLogger(__name__)

class VKController:
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π VK –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π API 5.199"""
    
    def __init__(self, settings=None, logger=None, loop=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        self.settings = settings
        self.logger = logger or logging.getLogger(__name__)
        self.loop = loop or asyncio.get_event_loop()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.vk_config = get_vk_config()
        self.bot_config = get_bot_config()
        
        # VK —Å–µ—Å—Å–∏–∏
        self.vk_sessions = {}
        self.vk_apis = {}
        self.longpoll = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.message_count = 0
        self.error_count = 0
        self.start_time = time.time()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK —Å–µ—Å—Å–∏–π
        self._init_vk_sessions()
        
        self.logger.info("üöÄ VK Controller –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å API 5.199")
    
    def _init_vk_sessions(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK —Å–µ—Å—Å–∏–π –¥–ª—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
        try:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–æ–∫–µ–Ω
            if self.vk_config['vk_user_token']:
                user_session = vk_api.VkApi(token=self.vk_config['vk_user_token'])
                self.vk_sessions['user'] = user_session
                self.vk_apis['user'] = user_session.get_api()
                self.logger.info("‚úÖ User VK session –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –ì—Ä—É–ø–ø–æ–≤–æ–π —Ç–æ–∫–µ–Ω
            if self.vk_config['vk_group_token']:
                group_session = vk_api.VkApi(token=self.vk_config['vk_group_token'])
                self.vk_sessions['group'] = group_session
                self.vk_apis['group'] = group_session.get_api()
                self.logger.info("‚úÖ Group VK session –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VK —Å–µ—Å—Å–∏–π: {e}")
    
    def get_api(self, token_type: str = 'group'):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ VK API –ø–æ —Ç–∏–ø—É —Ç–æ–∫–µ–Ω–∞"""
        return self.vk_apis.get(token_type)
    
    def get_session(self, token_type: str = 'group'):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ VK —Å–µ—Å—Å–∏–∏ –ø–æ —Ç–∏–ø—É —Ç–æ–∫–µ–Ω–∞"""
        return self.vk_sessions.get(token_type)
    
    async def send_message(self, peer_id: int, message: str, token_type: str = 'group', **kwargs) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ VK API"""
        try:
            api = self.get_api(token_type)
            if not api:
                self.logger.error(f"‚ùå VK API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–∏–ø–∞: {token_type}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(message) > self.bot_config['message_settings']['max_length']:
                if self.bot_config['message_settings']['auto_split']:
                    messages = self._split_message(message)
                    for msg in messages:
                        await self._send_single_message(api, peer_id, msg, **kwargs)
                    return True
                else:
                    self.logger.error(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: {len(message)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return False
            
            return await self._send_single_message(api, peer_id, message, **kwargs)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.error_count += 1
            return False
    
    async def _send_single_message(self, api, peer_id: int, message: str, **kwargs) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            result = api.messages.send(
                peer_id=peer_id,
                message=message,
                random_id=get_random_id(),
                **kwargs
            )
            
            self.message_count += 1
            self.logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ #{self.message_count} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {peer_id}: '{message[:50]}...'")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {peer_id}: {e}")
            self.error_count += 1
            return False
    
    def _split_message(self, message: str, max_length: int = None) -> List[str]:
        """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏"""
        if max_length is None:
            max_length = self.bot_config['message_settings']['max_length']
        
        messages = []
        while len(message) > max_length:
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–ª –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞
            split_point = message.rfind(' ', 0, max_length)
            if split_point == -1:
                split_point = max_length
            
            messages.append(message[:split_point])
            message = message[split_point:].lstrip()
        
        if message:
            messages.append(message)
        
        return messages
    
    async def post_to_wall(self, owner_id: int, message: str, **kwargs) -> bool:
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –Ω–∞ —Å—Ç–µ–Ω—É"""
        try:
            api = self.get_api('group')
            if not api:
                self.logger.error("‚ùå –ì—Ä—É–ø–ø–æ–≤–æ–π VK API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
            
            result = api.wall.post(
                owner_id=owner_id,
                message=message,
                **kwargs
            )
            
            post_id = result.get('post_id', 'unknown')
            self.logger.info(f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–∞ —Å—Ç–µ–Ω–µ {owner_id} (ID: {post_id})")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            self.error_count += 1
            return False
    
    async def get_conversations(self, count: int = 20) -> Optional[List]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–µ—Å–µ–¥"""
        try:
            api = self.get_api('group')
            if not api:
                self.logger.error("‚ùå –ì—Ä—É–ø–ø–æ–≤–æ–π VK API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return None
            
            conversations = api.messages.getConversations(count=count)
            return conversations.get('items', [])
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–µ–¥: {e}")
            self.error_count += 1
            return None
    
    async def get_group_members(self, group_id: int, count: int = 1000) -> Optional[List]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã"""
        try:
            api = self.get_api('group')
            if not api:
                self.logger.error("‚ùå –ì—Ä—É–ø–ø–æ–≤–æ–π VK API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return None
            
            members = api.groups.getMembers(group_id=group_id, count=count)
            return members.get('items', [])
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã: {e}")
            self.error_count += 1
            return None
    
    async def get_user_info(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            api = self.get_api('group')
            if not api:
                self.logger.error("‚ùå –ì—Ä—É–ø–ø–æ–≤–æ–π VK API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return None
            
            user_info = api.users.get(user_ids=user_id)[0]
            return user_info
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
            self.error_count += 1
            return None
    
    async def get_group_info(self, group_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ"""
        try:
            api = self.get_api('group')
            if not api:
                self.logger.error("‚ùå –ì—Ä—É–ø–ø–æ–≤–æ–π VK API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return None
            
            group_info = api.groups.getById(group_id=group_id)[0]
            return group_info
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ {group_id}: {e}")
            self.error_count += 1
            return None
    
    async def reply_to_message(self, peer_id: int, reply_to: int, message: str, **kwargs) -> bool:
        """–û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            api = self.get_api('group')
            if not api:
                self.logger.error("‚ùå –ì—Ä—É–ø–ø–æ–≤–æ–π VK API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
            
            result = api.messages.send(
                peer_id=peer_id,
                message=message,
                reply_to=reply_to,
                random_id=get_random_id(),
                **kwargs
            )
            
            self.message_count += 1
            self.logger.info(f"‚úÖ –û—Ç–≤–µ—Ç #{self.message_count} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {peer_id} –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {reply_to}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            self.error_count += 1
            return False
    
    async def send_sticker(self, peer_id: int, sticker_id: int, **kwargs) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞"""
        try:
            api = self.get_api('group')
            if not api:
                self.logger.error("‚ùå –ì—Ä—É–ø–ø–æ–≤–æ–π VK API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
            
            result = api.messages.send(
                peer_id=peer_id,
                sticker_id=sticker_id,
                random_id=get_random_id(),
                **kwargs
            )
            
            self.message_count += 1
            self.logger.info(f"‚úÖ –°—Ç–∏–∫–µ—Ä #{self.message_count} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {peer_id}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞: {e}")
            self.error_count += 1
            return False
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        uptime = time.time() - self.start_time
        return {
            'uptime_seconds': int(uptime),
            'uptime_formatted': f"{int(uptime // 3600)}—á {int((uptime % 3600) // 60)}–º {int(uptime % 60)}—Å",
            'messages_sent': self.message_count,
            'errors_count': self.error_count,
            'success_rate': f"{(self.message_count / (self.message_count + self.error_count) * 100):.1f}%" if (self.message_count + self.error_count) > 0 else "0%",
            'api_version': self.vk_config['api_version'],
            'sessions_available': list(self.vk_sessions.keys())
        }
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        return {
            'initialized': bool(self.vk_sessions),
            'sessions_count': len(self.vk_sessions),
            'apis_available': list(self.vk_apis.keys()),
            'longpoll_active': self.longpoll is not None,
            'config_loaded': bool(self.vk_config and self.bot_config)
        }