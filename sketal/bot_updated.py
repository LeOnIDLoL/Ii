#!/usr/bin/env python3
"""
Sketal Bot Updated - SuperGrok AI v1.3
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π VK API 5.199

–§—É–Ω–∫—Ü–∏–∏:
- VK API 5.199
- –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –≤ –±–µ—Å–µ–¥–∞—Ö
- –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
- –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
"""

import vk_api
import asyncio
import logging
import time
import json
from typing import Optional, Dict, Any, List
from datetime import datetime
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.utils import get_random_id

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from config import get_vk_config, get_bot_config
from utils.vk_controller import VKController

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class SketalBot:
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Sketal Bot —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π VK API 5.199"""
    
    def __init__(self, settings=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.settings = settings
        self.logger = logger
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.vk_config = get_vk_config()
        self.bot_config = get_bot_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        self.api = VKController(settings, logger=self.logger, loop=None)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        self.running = False
        self.longpoll = None
        self.conversation_handlers = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.message_count = 0
        self.command_count = 0
        self.start_time = time.time()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–µ—Å–µ–¥
        self._init_conversation_handlers()
        
        self.logger.info("‚úÖ Sketal Bot —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _init_conversation_handlers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–µ—Å–µ–¥"""
        try:
            # –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.conversation_handlers = {
                'greeting': self._handle_greeting,
                'help': self._handle_help,
                'status': self._handle_status,
                'info': self._handle_info,
                'stats': self._handle_stats,
                'ping': self._handle_ping
            }
            
            self.logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.conversation_handlers)} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–µ—Å–µ–¥")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–µ—Å–µ–¥: {e}")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ Sketal Bot...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å VK API
            if not self.api.get_status()['initialized']:
                self.logger.error("‚ùå VK API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            group_info = await self._get_group_info()
            if group_info:
                self.logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥—Ä—É–ø–ø–µ: {group_info['name']}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Long Polling
            await self._start_longpoll()
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return False
    
    async def _get_group_info(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã –∏–∑ —Ç–æ–∫–µ–Ω–∞
            api = self.api.get_api('group')
            if not api:
                return None
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            groups = api.groups.getById()
            if groups:
                return groups[0]
            
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: {e}")
            return None
    
    async def _start_longpoll(self):
        """–ó–∞–ø—É—Å–∫ Long Polling"""
        try:
            self.logger.info("üîå –ó–∞–ø—É—Å–∫ Long Polling...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –≥—Ä—É–ø–ø—ã
            group_session = self.api.get_session('group')
            if not group_session:
                self.logger.error("‚ùå –ì—Ä—É–ø–ø–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã
            group_info = await self._get_group_info()
            if not group_info:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –≥—Ä—É–ø–ø—ã")
                return
            
            group_id = group_info['id']
            
            # –°–æ–∑–¥–∞–µ–º Long Poll –∫–ª–∏–µ–Ω—Ç
            self.longpoll = VkBotLongPoll(group_session, group_id)
            self.running = True
            
            self.logger.info(f"‚úÖ Long Polling –∑–∞–ø—É—â–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
            await self._event_loop()
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Long Polling: {e}")
    
    async def _event_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
        try:
            for event in self.longpoll.listen():
                if not self.running:
                    break
                
                await self._handle_event(event)
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π: {e}")
        finally:
            self.logger.info("üèÅ –¶–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _handle_event(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ VK —Å–æ–±—ã—Ç–∏—è"""
        try:
            if event.type == VkBotEventType.MESSAGE_NEW:
                await self._handle_new_message(event)
            elif event.type == VkBotEventType.MESSAGE_REPLY:
                await self._handle_message_reply(event)
            elif event.type == VkBotEventType.MESSAGE_EDIT:
                await self._handle_message_edit(event)
            elif event.type == VkBotEventType.MESSAGE_ALLOW:
                await self._handle_message_allow(event)
            elif event.type == VkBotEventType.MESSAGE_DENY:
                await self._handle_message_deny(event)
            else:
                self.logger.debug(f"üìù –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event.type}")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
    
    async def _handle_new_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            message = event.message
            user_id = message.from_id
            text = message.text
            peer_id = message.peer_id
            message_id = message.id
            
            self.message_count += 1
            
            self.logger.info(f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #{self.message_count} –æ—Ç {user_id} –≤ {peer_id}: '{text[:50]}...'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º
            if await self._check_spam(user_id, peer_id):
                self.logger.warning(f"‚ö†Ô∏è –°–ø–∞–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if text.startswith('/'):
                await self._handle_command(text, user_id, peer_id, message_id)
            else:
                # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self._handle_regular_message(text, user_id, peer_id, message_id)
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _handle_command(self, command: str, user_id: int, peer_id: int, message_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
        try:
            self.command_count += 1
            
            # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            parts = command[1:].split(' ', 1)
            cmd = parts[0].lower()
            args = parts[1] if len(parts) > 1 else ""
            
            self.logger.info(f"üîß –ö–æ–º–∞–Ω–¥–∞ #{self.command_count}: /{cmd} –æ—Ç {user_id}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            if cmd in self.conversation_handlers:
                await self.conversation_handlers[cmd](user_id, peer_id, message_id, args)
            else:
                await self._send_error_message(peer_id, f"–ö–æ–º–∞–Ω–¥–∞ /{cmd} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
            await self._send_error_message(peer_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")
    
    async def _handle_regular_message(self, text: str, user_id: int, peer_id: int, message_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
            if self.bot_config['conversation_settings']['auto_reply']:
                await self._auto_reply(text, user_id, peer_id, message_id)
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _auto_reply(self, text: str, user_id: int, peer_id: int, message_id: int):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            # –ü—Ä–æ—Å—Ç—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
            text_lower = text.lower()
            
            if any(word in text_lower for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi']):
                await self.api.send_message(peer_id, "üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
            
            elif any(word in text_lower for word in ['–∫–∞–∫ –¥–µ–ª–∞', 'how are you']):
                await self.api.send_message(peer_id, "ü§ñ –£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! –ê —É —Ç–µ–±—è?")
            
            elif any(word in text_lower for word in ['—Å–ø–∞—Å–∏–±–æ', 'thanks', 'thank you']):
                await self.api.send_message(peer_id, "üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –ø–æ–º–æ—á—å!")
            
            elif any(word in text_lower for word in ['–ø–æ–∫–∞', 'bye', 'goodbye']):
                await self.api.send_message(peer_id, "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë—É–¥—É –∂–¥–∞—Ç—å –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
    
    async def _check_spam(self, user_id: int, peer_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
            current_time = time.time()
            key = f"{user_id}_{peer_id}"
            
            if not hasattr(self, '_spam_check'):
                self._spam_check = {}
            
            if key in self._spam_check:
                last_time, count = self._spam_check[key]
                
                # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã
                if current_time - last_time > 60:
                    self._spam_check[key] = (current_time, 1)
                    return False
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                count += 1
                self._spam_check[key] = (current_time, count)
                
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –µ—Å–ª–∏ –±–æ–ª—å—à–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
                if count > 5:
                    return True
            
            else:
                self._spam_check[key] = (current_time, 1)
            
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∞–º–∞: {e}")
            return False
    
    async def _send_error_message(self, peer_id: int, error_text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        try:
            await self.api.send_message(peer_id, f"‚ùå {error_text}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    async def _handle_greeting(self, user_id: int, peer_id: int, message_id: int, args: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        greeting = self.bot_config['conversation_settings']['greeting_message']
        await self.api.send_message(peer_id, greeting)
    
    async def _handle_help(self, user_id: int, peer_id: int, message_id: int, args: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø—Ä–∞–≤–∫–∏"""
        help_text = self.bot_config['conversation_settings']['help_message']
        await self.api.send_message(peer_id, help_text)
    
    async def _handle_status(self, user_id: int, peer_id: int, message_id: int, args: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            bot_stats = self.api.get_stats()
            vk_status = self.api.get_status()
            
            status_text = f"""
üìä **–°—Ç–∞—Ç—É—Å Sketal Bot:**
ü§ñ –í–µ—Ä—Å–∏—è: {self.bot_config['version']}
üì± VK API: {self.vk_config['api_version']}
‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {bot_stats['uptime_formatted']}
üì® –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {bot_stats['messages_sent']}
üîß –ö–æ–º–∞–Ω–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.command_count}
‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {bot_stats['success_rate']}
üîå –°–µ—Å—Å–∏–∏: {', '.join(vk_status['apis_available'])}
            """
            
            await self.api.send_message(peer_id, status_text.strip())
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await self._send_error_message(peer_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
    
    async def _handle_info(self, user_id: int, peer_id: int, message_id: int, args: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        info_text = f"""
ü§ñ **Sketal Bot - SuperGrok AI v1.3**
üì± –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ VK API 5.199
üîå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –≤ –±–µ—Å–µ–¥–∞—Ö
üì¶ –ü–ª–∞–≥–∏–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        
        await self.api.send_message(peer_id, info_text.strip())
    
    async def _handle_stats(self, user_id: int, peer_id: int, message_id: int, args: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            bot_stats = self.api.get_stats()
            
            stats_text = f"""
üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**
‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {bot_stats['uptime_formatted']}
üì® –°–æ–æ–±—â–µ–Ω–∏–π: {bot_stats['messages_sent']}
üîß –ö–æ–º–∞–Ω–¥: {self.command_count}
‚ùå –û—à–∏–±–æ–∫: {bot_stats['errors_count']}
‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {bot_stats['success_rate']}
            """
            
            await self.api.send_message(peer_id, stats_text.strip())
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await self._send_error_message(peer_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    
    async def _handle_ping(self, user_id: int, peer_id: int, message_id: int, args: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ ping –∫–æ–º–∞–Ω–¥—ã"""
        start_time = time.time()
        await self.api.send_message(peer_id, "üèì Pong!")
        end_time = time.time()
        
        ping_time = round((end_time - start_time) * 1000, 2)
        await self.api.send_message(peer_id, f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {ping_time}ms")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Sketal Bot...")
            self.running = False
            
            if self.longpoll:
                self.longpoll.stop()
            
            self.logger.info("‚úÖ Sketal Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
        uptime = time.time() - self.start_time
        return {
            'uptime_seconds': int(uptime),
            'uptime_formatted': f"{int(uptime // 3600)}—á {int((uptime % 3600) // 60)}–º {int(uptime % 60)}—Å",
            'message_count': self.message_count,
            'command_count': self.command_count,
            'vk_stats': self.api.get_stats() if self.api else {},
            'bot_status': {
                'running': self.running,
                'longpoll_active': self.longpoll is not None,
                'conversation_handlers': len(self.conversation_handlers)
            }
        }


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ Sketal Bot with VK Support - SuperGrok AI v1.3")
    print("=" * 60)
    
    # –ü—Ä–æ—Å—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    class SimpleSettings:
        DEBUG = True
        PLUGINS = {}
    
    settings = SimpleSettings()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = SketalBot(settings)
    
    try:
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        success = await bot.start()
        
        if success:
            print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            print("üì± –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
            
            # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            while bot.running:
                await asyncio.sleep(1)
                
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        await bot.stop()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
        await bot.stop()
    finally:
        print("üèÅ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Bot stopped by user")
    except Exception as e:
        print(f"‚ùå Bot error: {e}")